using FirstFloor.ModernUI.Windows.Controls;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace HotspotMe
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : ModernWindow
    {
        private DateTime _startTime = DateTime.MinValue;
        DispatcherTimer _timer = new DispatcherTimer();
        hotSpotlogic hl = new hotSpotlogic();
        NetworkTraffic nt;
        public MainWindow()
        {
            InitializeComponent();
            startnetworktraffic();
            nt = new NetworkTraffic();

            txt_ssid.Text = Properties.Settings.Default.userssID;
            txt_password.Password = Properties.Settings.Default.userpassword;
            txt_confirmpassword.Password = Properties.Settings.Default.userpassword;            

        }

        #region hotspot
        private void btn_setHotspot_Click(object sender, RoutedEventArgs e)
        {
            if (txt_ssid.Text != null && txt_ssid.Text != "")
            {
                if (txt_password.Password != txt_confirmpassword.Password)
                {
                    MessageBox.Show("Die Passwörter stimmen nicht überein");
                }
                else if(txt_password.Password.Length < 8)
                {
                    MessageBox.Show("Das Passwort muss mindestens 8 Zeichen lang sein");
                }
               else
                {
                    hl.sethotspot(txt_ssid.Text, txt_password.Password,cb_persistent.IsChecked.Value);
                }
            }
            else
            {
                MessageBox.Show("Bitte geben Sie eine gültige SSID(Netzwerkname) an.");
            }

        }

        private void btn_startHotspot_Click(object sender, RoutedEventArgs e)
        {
            hl.starthotspot();
            mE_wlangif.Visibility = Visibility.Visible;
        }

        private void btn_stopHotspot_Click(object sender, RoutedEventArgs e)
        {
            hl.stophotspot();
            mE_wlangif.Visibility = Visibility.Hidden;
        }
        #endregion

        #region networktraffic
        private void startnetworktraffic()
        {
            _timer.Start();
            _timer.Tick += new EventHandler(tickevent);
        }

        private void tickevent(object sender, EventArgs e)
        {
            UserSettings.GetterSetter gs = new UserSettings.GetterSetter();
            lbl_monitor.Content = nt.getConnectionInfo(gs.networkindex);
        }
        #endregion

        #region hover in/out
        private void MouseHoverEnter(object sender, MouseEventArgs e)
        {
            try { (sender as Canvas).Background = Brushes.LightBlue; }
            catch (Exception) { }
        }

        private void MouseHoverLeave(object sender, MouseEventArgs e)
        {
            try { (sender as Canvas).Background = Brushes.White; }
            catch (Exception) { }
        }
        #endregion

        private void myGif_MediaEnded(object sender, RoutedEventArgs e)
        {
            mE_wlangif.Position = new TimeSpan(0, 0, 1);
            mE_wlangif.Play();
        }

        private void Explanation_Click(object sender, MouseButtonEventArgs e)
        {
            MessageBox.Show("If not checked device needs to login with password everytime");
        }

        private void txt_confirmpassword_PasswordChanged(object sender, RoutedEventArgs e)
        {
            if (txt_password.Password != txt_confirmpassword.Password)
            {
                txt_confirmpassword.BorderBrush = Brushes.Red;
            }
            else
            {
                txt_confirmpassword.BorderBrush = Brushes.LightGreen;
            }
        }

        private void canvas_settings_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            UserSettings.UserSettingsView usv = new UserSettings.UserSettingsView();
            usv.Show();
        }
    }
}
